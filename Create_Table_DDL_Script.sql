CREATE DATABASE IF NOT EXISTS VAD_DBT_TEST;
USE DATABASE VAD_DBT_TEST;

CREATE SCHEMA IF NOT EXISTS INC_LAYER;

CREATE SCHEMA IF NOT EXISTS ANALYTICS_LAYER;

-- Create County Table
CREATE TABLE IF NOT EXISTS VAD_DBT_TEST.DBT_DVAD.County (
    CountyID INT PRIMARY KEY,
    Name VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- Create City Table
CREATE TABLE IF NOT EXISTS VAD_DBT_TEST.DBT_DVAD.City (
    CityID INT PRIMARY KEY,
    Name VARCHAR(255),
    CountyID INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
    --FOREIGN KEY (CountyID) REFERENCES County(CountyID)
);

-- Create Customer Table
CREATE TABLE IF NOT EXISTS VAD_DBT_TEST.DBT_DVAD.Customer (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(255),
    CityID INT,
    CountryID INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
    --FOREIGN KEY (CityID) REFERENCES City(CityID),
    --FOREIGN KEY (CountryID) REFERENCES County(CountyID)
);

-- Create Brand Table
CREATE TABLE IF NOT EXISTS VAD_DBT_TEST.DBT_DVAD.Brand (
    BrandID INT PRIMARY KEY,
    Name VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- Create Product Table
CREATE TABLE IF NOT EXISTS VAD_DBT_TEST.DBT_DVAD.Product (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(255),
    BrandID INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
    --FOREIGN KEY (BrandID) REFERENCES Brand(BrandID)
);

-- Create Sales Table
CREATE TABLE IF NOT EXISTS VAD_DBT_TEST.DBT_DVAD.Sales (
    SaleID INT PRIMARY KEY,
    CustomerID INT,
    ProductID INT,
    SaleDate DATE,
    Quantity INT,
    SaleAmount DECIMAL(10, 2),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
    --FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
    --FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);


